{"id":"node_modules/perlin-simplex/index.js","dependencies":[{"name":"C:\\Users\\Loc\\Desktop\\projects\\Threejs Terrain Gen\\package.json","includedInParent":true,"mtime":1601098802388},{"name":"C:\\Users\\Loc\\Desktop\\projects\\Threejs Terrain Gen\\node_modules\\perlin-simplex\\package.json","includedInParent":true,"mtime":1601098802203}],"generated":{"js":"// https://gist.github.com/banksean/304522\n//\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nmodule.exports = SimplexNoise = function(r) {\n  if (r == undefined) r = Math;\n  this.grad3 = [[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],\n                                 [1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],\n                                 [0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]];\n  this.p = [];\n  for (var i=0; i<256; i++) {\n    this.p[i] = Math.floor(r.random()*256);\n  }\n  // To remove the need for index wrapping, double the permutation table length\n  this.perm = [];\n  for(var i=0; i<512; i++) {\n    this.perm[i]=this.p[i & 255];\n  }\n\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n  this.simplex = [\n    [0,1,2,3],[0,1,3,2],[0,0,0,0],[0,2,3,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,2,3,0],\n    [0,2,1,3],[0,0,0,0],[0,3,1,2],[0,3,2,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,3,2,0],\n    [0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],\n    [1,2,0,3],[0,0,0,0],[1,3,0,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,3,0,1],[2,3,1,0],\n    [1,0,2,3],[1,0,3,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,0,3,1],[0,0,0,0],[2,1,3,0],\n    [0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],\n    [2,0,1,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,0,1,2],[3,0,2,1],[0,0,0,0],[3,1,2,0],\n    [2,1,0,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,1,0,2],[0,0,0,0],[3,2,0,1],[3,2,1,0]];\n};\n\nSimplexNoise.prototype.dot = function(g, x, y) {\n  return g[0]*x + g[1]*y;\n};\n\nSimplexNoise.prototype.dot3 = function(g, x, y, z) {\n  return g[0]*x + g[1]*y + g[2]*z;\n};\n\nSimplexNoise.prototype.noise = function(xin, yin) {\n  var n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n  var F2 = 0.5*(Math.sqrt(3.0)-1.0);\n  var s = (xin+yin)*F2; // Hairy factor for 2D\n  var i = Math.floor(xin+s);\n  var j = Math.floor(yin+s);\n  var G2 = (3.0-Math.sqrt(3.0))/6.0;\n  var t = (i+j)*G2;\n  var X0 = i-t; // Unskew the cell origin back to (x,y) space\n  var Y0 = j-t;\n  var x0 = xin-X0; // The x,y distances from the cell origin\n  var y0 = yin-Y0;\n  // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n  if(x0>y0) {i1=1; j1=0;} // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n  else {i1=0; j1=1;}      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n  var y1 = y0 - j1 + G2;\n  var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n  var y2 = y0 - 1.0 + 2.0 * G2;\n  // Work out the hashed gradient indices of the three simplex corners\n  var ii = i & 255;\n  var jj = j & 255;\n  var gi0 = this.perm[ii+this.perm[jj]] % 12;\n  var gi1 = this.perm[ii+i1+this.perm[jj+j1]] % 12;\n  var gi2 = this.perm[ii+1+this.perm[jj+1]] % 12;\n  // Calculate the contribution from the three corners\n  var t0 = 0.5 - x0*x0-y0*y0;\n  if(t0<0) n0 = 0.0;\n  else {\n    t0 *= t0;\n    n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0);  // (x,y) of grad3 used for 2D gradient\n  }\n  var t1 = 0.5 - x1*x1-y1*y1;\n  if(t1<0) n1 = 0.0;\n  else {\n    t1 *= t1;\n    n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n  }\n  var t2 = 0.5 - x2*x2-y2*y2;\n  if(t2<0) n2 = 0.0;\n  else {\n    t2 *= t2;\n    n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n  return 70.0 * (n0 + n1 + n2);\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function(xin, yin, zin) {\n  var n0, n1, n2, n3; // Noise contributions from the four corners\n  // Skew the input space to determine which simplex cell we're in\n  var F3 = 1.0/3.0;\n  var s = (xin+yin+zin)*F3; // Very nice and simple skew factor for 3D\n  var i = Math.floor(xin+s);\n  var j = Math.floor(yin+s);\n  var k = Math.floor(zin+s);\n  var G3 = 1.0/6.0; // Very nice and simple unskew factor, too\n  var t = (i+j+k)*G3;\n  var X0 = i-t; // Unskew the cell origin back to (x,y,z) space\n  var Y0 = j-t;\n  var Z0 = k-t;\n  var x0 = xin-X0; // The x,y,z distances from the cell origin\n  var y0 = yin-Y0;\n  var z0 = zin-Z0;\n  // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n  // Determine which simplex we are in.\n  var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n  var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n  if(x0>=y0) {\n    if(y0>=z0)\n      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order\n      else if(x0>=z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order\n      else { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; } // Z X Y order\n    }\n  else { // x0<y0\n    if(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order\n    else if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order\n    else { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order\n  }\n  // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n  // c = 1/6.\n  var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n  var y1 = y0 - j1 + G3;\n  var z1 = z0 - k1 + G3;\n  var x2 = x0 - i2 + 2.0*G3; // Offsets for third corner in (x,y,z) coords\n  var y2 = y0 - j2 + 2.0*G3;\n  var z2 = z0 - k2 + 2.0*G3;\n  var x3 = x0 - 1.0 + 3.0*G3; // Offsets for last corner in (x,y,z) coords\n  var y3 = y0 - 1.0 + 3.0*G3;\n  var z3 = z0 - 1.0 + 3.0*G3;\n  // Work out the hashed gradient indices of the four simplex corners\n  var ii = i & 255;\n  var jj = j & 255;\n  var kk = k & 255;\n  var gi0 = this.perm[ii+this.perm[jj+this.perm[kk]]] % 12;\n  var gi1 = this.perm[ii+i1+this.perm[jj+j1+this.perm[kk+k1]]] % 12;\n  var gi2 = this.perm[ii+i2+this.perm[jj+j2+this.perm[kk+k2]]] % 12;\n  var gi3 = this.perm[ii+1+this.perm[jj+1+this.perm[kk+1]]] % 12;\n  // Calculate the contribution from the four corners\n  var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n  if(t0<0) n0 = 0.0;\n  else {\n    t0 *= t0;\n    n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n  }\n  var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n  if(t1<0) n1 = 0.0;\n  else {\n    t1 *= t1;\n    n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n  }\n  var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n  if(t2<0) n2 = 0.0;\n  else {\n    t2 *= t2;\n    n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n  }\n  var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n  if(t3<0) n3 = 0.0;\n  else {\n    t3 *= t3;\n    n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to stay just inside [-1,1]\n  return 32.0*(n0 + n1 + n2 + n3);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/perlin-simplex/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/perlin-simplex/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}}],"sources":{"node_modules/perlin-simplex/index.js":"// https://gist.github.com/banksean/304522\n//\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nmodule.exports = SimplexNoise = function(r) {\n  if (r == undefined) r = Math;\n  this.grad3 = [[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],\n                                 [1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],\n                                 [0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]];\n  this.p = [];\n  for (var i=0; i<256; i++) {\n    this.p[i] = Math.floor(r.random()*256);\n  }\n  // To remove the need for index wrapping, double the permutation table length\n  this.perm = [];\n  for(var i=0; i<512; i++) {\n    this.perm[i]=this.p[i & 255];\n  }\n\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n  this.simplex = [\n    [0,1,2,3],[0,1,3,2],[0,0,0,0],[0,2,3,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,2,3,0],\n    [0,2,1,3],[0,0,0,0],[0,3,1,2],[0,3,2,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,3,2,0],\n    [0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],\n    [1,2,0,3],[0,0,0,0],[1,3,0,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,3,0,1],[2,3,1,0],\n    [1,0,2,3],[1,0,3,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,0,3,1],[0,0,0,0],[2,1,3,0],\n    [0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],\n    [2,0,1,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,0,1,2],[3,0,2,1],[0,0,0,0],[3,1,2,0],\n    [2,1,0,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,1,0,2],[0,0,0,0],[3,2,0,1],[3,2,1,0]];\n};\n\nSimplexNoise.prototype.dot = function(g, x, y) {\n  return g[0]*x + g[1]*y;\n};\n\nSimplexNoise.prototype.dot3 = function(g, x, y, z) {\n  return g[0]*x + g[1]*y + g[2]*z;\n};\n\nSimplexNoise.prototype.noise = function(xin, yin) {\n  var n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n  var F2 = 0.5*(Math.sqrt(3.0)-1.0);\n  var s = (xin+yin)*F2; // Hairy factor for 2D\n  var i = Math.floor(xin+s);\n  var j = Math.floor(yin+s);\n  var G2 = (3.0-Math.sqrt(3.0))/6.0;\n  var t = (i+j)*G2;\n  var X0 = i-t; // Unskew the cell origin back to (x,y) space\n  var Y0 = j-t;\n  var x0 = xin-X0; // The x,y distances from the cell origin\n  var y0 = yin-Y0;\n  // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n  if(x0>y0) {i1=1; j1=0;} // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n  else {i1=0; j1=1;}      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n  var y1 = y0 - j1 + G2;\n  var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n  var y2 = y0 - 1.0 + 2.0 * G2;\n  // Work out the hashed gradient indices of the three simplex corners\n  var ii = i & 255;\n  var jj = j & 255;\n  var gi0 = this.perm[ii+this.perm[jj]] % 12;\n  var gi1 = this.perm[ii+i1+this.perm[jj+j1]] % 12;\n  var gi2 = this.perm[ii+1+this.perm[jj+1]] % 12;\n  // Calculate the contribution from the three corners\n  var t0 = 0.5 - x0*x0-y0*y0;\n  if(t0<0) n0 = 0.0;\n  else {\n    t0 *= t0;\n    n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0);  // (x,y) of grad3 used for 2D gradient\n  }\n  var t1 = 0.5 - x1*x1-y1*y1;\n  if(t1<0) n1 = 0.0;\n  else {\n    t1 *= t1;\n    n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n  }\n  var t2 = 0.5 - x2*x2-y2*y2;\n  if(t2<0) n2 = 0.0;\n  else {\n    t2 *= t2;\n    n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n  return 70.0 * (n0 + n1 + n2);\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function(xin, yin, zin) {\n  var n0, n1, n2, n3; // Noise contributions from the four corners\n  // Skew the input space to determine which simplex cell we're in\n  var F3 = 1.0/3.0;\n  var s = (xin+yin+zin)*F3; // Very nice and simple skew factor for 3D\n  var i = Math.floor(xin+s);\n  var j = Math.floor(yin+s);\n  var k = Math.floor(zin+s);\n  var G3 = 1.0/6.0; // Very nice and simple unskew factor, too\n  var t = (i+j+k)*G3;\n  var X0 = i-t; // Unskew the cell origin back to (x,y,z) space\n  var Y0 = j-t;\n  var Z0 = k-t;\n  var x0 = xin-X0; // The x,y,z distances from the cell origin\n  var y0 = yin-Y0;\n  var z0 = zin-Z0;\n  // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n  // Determine which simplex we are in.\n  var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n  var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n  if(x0>=y0) {\n    if(y0>=z0)\n      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order\n      else if(x0>=z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order\n      else { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; } // Z X Y order\n    }\n  else { // x0<y0\n    if(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order\n    else if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order\n    else { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order\n  }\n  // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n  // c = 1/6.\n  var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n  var y1 = y0 - j1 + G3;\n  var z1 = z0 - k1 + G3;\n  var x2 = x0 - i2 + 2.0*G3; // Offsets for third corner in (x,y,z) coords\n  var y2 = y0 - j2 + 2.0*G3;\n  var z2 = z0 - k2 + 2.0*G3;\n  var x3 = x0 - 1.0 + 3.0*G3; // Offsets for last corner in (x,y,z) coords\n  var y3 = y0 - 1.0 + 3.0*G3;\n  var z3 = z0 - 1.0 + 3.0*G3;\n  // Work out the hashed gradient indices of the four simplex corners\n  var ii = i & 255;\n  var jj = j & 255;\n  var kk = k & 255;\n  var gi0 = this.perm[ii+this.perm[jj+this.perm[kk]]] % 12;\n  var gi1 = this.perm[ii+i1+this.perm[jj+j1+this.perm[kk+k1]]] % 12;\n  var gi2 = this.perm[ii+i2+this.perm[jj+j2+this.perm[kk+k2]]] % 12;\n  var gi3 = this.perm[ii+1+this.perm[jj+1+this.perm[kk+1]]] % 12;\n  // Calculate the contribution from the four corners\n  var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;\n  if(t0<0) n0 = 0.0;\n  else {\n    t0 *= t0;\n    n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n  }\n  var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;\n  if(t1<0) n1 = 0.0;\n  else {\n    t1 *= t1;\n    n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n  }\n  var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;\n  if(t2<0) n2 = 0.0;\n  else {\n    t2 *= t2;\n    n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n  }\n  var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;\n  if(t3<0) n3 = 0.0;\n  else {\n    t3 *= t3;\n    n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n  }\n  // Add contributions from each corner to get the final noise value.\n  // The result is scaled to stay just inside [-1,1]\n  return 32.0*(n0 + n1 + n2 + n3);\n};\n"},"lineCount":186}},"error":null,"hash":"dac6496bca279680bc4eff518b20d5ed","cacheData":{"env":{}}}